title = "Попробовать online"
url = "/try"
layout = "main"
description = "Try online"
meta_title = "Try online"
meta_description = "Try online"
is_hidden = 0

[viewBag]
localeUrl[en] = "/poprobovat-online"
==
<?php
function onStart()
{
    $this->addJs('assets/js/codemirror.js');
    $this->addJs('assets/js/simple.js');
	$this->addJs('assets/js/fusion.js');
    $this->addJs('assets/js/javascript.js');
    $this->addJs('https://cdn.polyfill.io/v2/polyfill.min.js');
}
?>
==
<script>

	//let server = 'http://localhost:8888';
	let server = 'https://tryonline.lsfusion.org';

	//let demoServer = 'http://localhost:8888';
	let demoServer = 'https://demo.lsfusion.org/mm';

	let rmiPort = null;
	let rmiStarted = false;

	window.onbeforeunload = function() {
		if (window.start_server) {
			stopServer();
			window.start_server = false;
			window.clearInterval(window.timerIdIsActiveTab);
			stopLogServerScheduler();
			return "Данные не сохранены. Точно перейти?";
		}
	};

	function isActiveTab() {
		// if (window.start_server) {
		// 	window.onbeforeunload = function() {
		// 		pullServerRequest('', 'stop');
		// 		return "Данные не сохранены. Точно перейти?";
		// 	};
		// }
		// if (
		// 	document.hidden &&
		// 	window.start_server
		// ) {
		// 	console.log('func isActiveTab');
		//pullServerRequest('', 'stop');
		// }
	}

	//var timerIdIsActiveTab = setInterval(isActiveTab, 1000);

	function pullServerRequestDBMSMode() {
		var activeTab = document.getElementById('tab_db');
		var code = activeTab.querySelector('.CodeMirror').CodeMirror.getValue();

		let xhr = sendRequest(demoServer + "/eval", code, 'arraybuffer');

		xhr.addEventListener("readystatechange", function () {
			if (this.readyState === 4) {
				var contentType = this.getResponseHeader('Content-Type');
				
				if (contentType.startsWith('application/json')) {
                    getResultArea().value = JSON.stringify(JSON.parse(new TextDecoder('utf-8').decode(this.response)), null, 2);	
				} else if (contentType.startsWith('application/') && !contentType.startsWith('application/xml')) {
					var blob = new Blob([this.response], { type: contentType });
					var link = document.createElement('a');
					link.href = window.URL.createObjectURL(blob);
					link.download = 'response';

					document.body.appendChild(link);

                    getResultArea().value = '';
					link.click();

					document.body.removeChild(link);
				} else {
                    getResultArea().value = new TextDecoder('utf-8').decode(this.response);
				}
			}
		});

	}

	function startServer(code) {
		window.lastServerReturn = 0;

		let xhr = sendEscapedRequest(server + "/exec?action=Main.startServer", {'code': code});

		xhr.addEventListener("readystatechange", function () {
			if (this.readyState === 4) {
				let response = JSON.parse(this.responseText);
				rmiPort = response.port;
				window.serverStartReturn = response.server;
				startLogServerScheduler();
				return this.responseText;
			}
		});
	}

	function stopServer() {
		console.log('func stopServer');

		let xhr = sendEscapedRequest(server + "/exec?action=Main.stopServer", {'server': window.serverStartReturn});

		stopLogServerScheduler();
		getResultArea().value = '';

		window.start_server = false;
		rmiStarted = false;
		updateButtonsVisibility(false);

		xhr.addEventListener("readystatechange", function () {
			if (this.readyState === 4) {
				return this.responseText;
			}
		});
	}

	function getResultArea() {
		let activeTab = document.querySelector('.mode-content.active');
		return activeTab.querySelector('.plagin-panel__second-box');
	}

	function getServerLog(resultArea) {
		window.isRunning = true;
		console.log('func getServerLog');

		let xhr = sendEscapedRequest(server + "/exec?action=Main.getServerLog", {'server': window.serverStartReturn, 'lastAnswer': window.lastServerReturn});

		xhr.addEventListener("readystatechange", function () {
			if (this.readyState === 4) {
				let oldTextareaValue = resultArea.value;
				let response = JSON.parse(this.responseText);
				if(response != null && response.text != null) {
					resultArea.value = oldTextareaValue + response.text;

					if(!rmiStarted) {
                        let match = /.*Exporting\sRMI\sLogics\sobject\s\(port:\s(\d+)\).*/g.exec(resultArea.value);
                        if (match) {
                        	window.open(server + '/?port=' + rmiPort, '_blank');
							showOpenTabButton();
							rmiStarted = true;
                        }
                    }

					resultArea.scrollTop = resultArea.scrollHeight;
					window.lastServerReturn = response.answer;
				} else if (window.start_server && oldTextareaValue === '') {
					resultArea.value = 'Server is starting...\n';
				}
			}
			window.isRunning = false;
		});
	}

	function startServerRequest() {
		console.log('func startServer');

		let activeTab = document.querySelector('.mode-content.active');
		let code = activeTab.querySelector('.CodeMirror').CodeMirror.getValue();

		if (!window.start_server) {
			window.start_server = true;
			window.timerIdIsActiveTab = setInterval(isActiveTab, 1000);
			startServer(code);
			updateButtonsVisibility(true);
		}
	}

	function restartServerRequest() {
		console.log('func restartServer');
		let activeTab = document.querySelector('.mode-content.active');
		let code = activeTab.querySelector('.CodeMirror').CodeMirror.getValue();
		if (window.start_server) {
			if (window.lastServerReturn > 0) {
				let xhr = sendEscapedRequest(server + "/exec?action=Main.restartServer", {'server': window.serverStartReturn, 'code': code});

				xhr.addEventListener("readystatechange", function () {
					if (this.readyState === 4) {
						getResultArea().value = '';
						window.lastServerReturn = 0;
						return this.responseText;
					}
				});
			}
		}
	}

	function startLogServerScheduler() {
		//включаем получение логов
		if(window.getServerLogScheduler == null) {
			let resultArea = getResultArea();
			window.getServerLogScheduler = window.setInterval(function () {
				if(!window.isRunning) {
					getServerLog(resultArea);
				}
			}, 100);
		}
	}

	function stopLogServerScheduler() {
		//выключаем получение логов
		window.clearInterval(window.getServerLogScheduler);
		window.getServerLogScheduler = null;
	}

	function removeFocusButtonOpen() {
		document.getElementById("openTabButton").blur();
	}

	function stopServerRequest() {
		if (window.start_server) {
			stopServer();
		}
	}
	
	function sendEscapedRequest(url, request) {
	    return sendRequest(url, btoa(unescape(encodeURIComponent(JSON.stringify(request)))));
    }

	function sendRequest(url, request, responseType) {
		var xhr = new XMLHttpRequest();
		xhr.withCredentials = true;
		xhr.open("POST", url);
		xhr.setRequestHeader("Content-Type", "text/plain; charset=UTF-8");
		if (responseType != null) {
            xhr.responseType = responseType;
        }
		xhr.send(request);
		return xhr;
	}

	function updateButtonsVisibility(start) {
		document.getElementById("startPlatformButton").style.display=start ? "none" : "block";
		document.getElementById("restartPlatformButton").style.display= start ? "block" : "none";
		document.getElementById("stopPlatformButton").style.display=start ? "block" : "none";
		document.getElementById("openTabButton").style.display=start && rmiStarted ? "block" : "none";
	}

	function showOpenTabButton() {
		document.getElementById("openTabButton").style.display="block";
		document.getElementById("openTabButton").href=server + "/?port=" + rmiPort;
		document.getElementById("openTabButton").target="_blank";
	}

</script>

<div class="show-devices">
	<p class="device-text">Available only in desktop version</p>
</div>
<div class="mode-panel hide-devices">
	<ul class="mode-panel__mode-list">
		<li class="mode-panel__mode-li">
			<a class="link mode-panel__mode-item mode-panel__mode-item_active" href="#tab_db">Database</a>
		</li>
		<li class="mode-panel__mode-li">
			<a class="link mode-panel__mode-item" href="#tab_platform">Platform</a>
		</li>
	</ul>
</div>
<div class="mode-content hide-devices active" id="tab_db">
	<div class="plagin-panel hide-devices">
		<div class="plagin-panel__panel-item plagin-panel__left-item plagin-panel__panel-item_first-box">
			<div class="plagin-panel__plagin-box">
				<a class="btn btn_round" href="javascript:void(0);" style="display:block" onclick="pullServerRequestDBMSMode();">
					<img alt="arrow" title="Выполнить код" src="{{ 'assets/images/arrow.svg'|theme }}">
				</a>
			</div>
		</div>
		<div class="plagin-panel__panel-item plagin-panel__right-item">
			<div class="text">
				In database mode the code you enter is executed on <a href="https://documentation.lsfusion.org/display/LSFUS/Online+demo">the MM demo server</a> via an <a href="https://documentation.lsfusion.org/display/LSFUS/Access+from+an+external+system#Accessfromanexternalsystem-http">HTTP request</a>. <a href="https://documentation.lsfusion.org/display/LSFUS/Access+from+an+external+system#Accessfromanexternalsystem-httpresult">The result</a> of this request is displayed in the bottom window. In this mode you cannot execute instructions that change the global system logic. You also cannot create <a href="https://documentation.lsfusion.org/display/LSFUS/Events">events</a> or any elements that use them (<a href="https://documentation.lsfusion.org/display/LSFUS/Constraints">constraints</a>, <a href="https://documentation.lsfusion.org/display/LSFUS/Classes">classes</a> and <a href="https://documentation.lsfusion.org/display/LSFUS/Aggregations">aggregations</a>), or elements of the physical model (such as <a href="https://documentation.lsfusion.org/display/LSFUS/Tables">tables</a>, <a href="https://documentation.lsfusion.org/display/LSFUS/Indexes">indexes</a> and <a href="https://documentation.lsfusion.org/display/LSFUS/Materializations">materializations</a>). All data properties in this mode are considered <a href="https://documentation.lsfusion.org/pages/viewpage.action?pageId=688168#PrimaryProperties(DATA)-local">local</a>.  <a href="https://documentation.lsfusion.org/display/LSFUS/Interactive+view">Interactive views</a> are also not supported in this mode.
			</div>
			<textarea readonly class="plagin-panel__second-box"></textarea>
		</div>
	</div>
</div>

<div class="mode-content hide-devices" id="tab_platform">
	<div class="plagin-panel hide-devices">
		<div class="plagin-panel__panel-item plagin-panel__left-item plagin-panel__panel-item_first-box">
			<div class="plagin-panel__plagin-box">
                <a class="btn btn_round" href="javascript:void(0);" id="startPlatformButton" style="display:block" onclick="startServerRequest();">
                    <img alt="arrow" title="Запустить сервер" src="{{ 'assets/images/arrow.svg'|theme }} ">
                </a>
				<a class="btn btn_restart" id="restartPlatformButton" style="display:none" onclick="restartServerRequest();">
					<img alt="restart" title="Перезапустить сервер" src="{{ 'assets/images/arrow-restart.svg'|theme }}">
				</a>
				<a class="btn btn_stop" href="javascript:void(0);" id="stopPlatformButton" style="display:none" onclick="stopServerRequest();">
					<img alt="stop" title="Остановить и удалить сервер" src="{{ 'assets/images/stop.svg'|theme }}">
				</a>
				<a class="btn btn_open" id="openTabButton" style="display:none" onclick="removeFocusButtonOpen();">
					<img alt="open" title="Открыть сервер в новой вкладке" src="{{ 'assets/images/open.png'|theme }}">
				</a>
			</div>
		</div>
		<div class="plagin-panel__panel-item plagin-panel__right-item">
			<div class="text">
				In platform mode the code you enter is considered the only application  <a href="https://documentation.lsfusion.org/display/LSFUS/Modules">module</a> of the server you start. The application server starts using the first free <a href="https://documentation.lsfusion.org/display/LSFUS/Launch+parameters">port </a> within the certain range. Standard output log (<a href="https://documentation.lsfusion.org/display/LSFUS/Journals+and+logs#Journalsandlogs-stdout">stdout</a>) of this server is output to the window underneath. After the first server launch a new tab in browser opens with UI of this server. Each restart is treated as a change of the previously launched logic. Compared to the database mode this one has no limitations, but it requires additional time to start the server. To minimize this time the server is started in<a href="https://documentation.lsfusion.org/display/LSFUS/Launch+parameters#Launchparameters-lightstart">a light</a> mode. 
			</div>
			<textarea readonly class="plagin-panel__second-box"></textarea>
		</div>
	</div>
</div>

<script>
	window.onload = onLoad();

	function onLoad() {
		var textareas = document.querySelectorAll('.plagin-panel__second-box');
		for (i = 0; i < textareas.length; i++) {
			addResultTextareasListeners(textareas[i]);
		}

		loadExamples();
	}

	function addResultTextareasListeners(textarea) {
		textarea.addEventListener("mouseover", function(event) {
			textarea.style.overflow = 'auto';
		});
		textarea.addEventListener("mouseout", function(event) {
			textarea.style.overflow = 'hidden';
		});
	}

	function loadExamples() {
		var tabs = document.querySelectorAll('.mode-content');
		for (var t = 0; t < tabs.length; t++) {
			var currentTab = tabs[t];

			let xhr = sendEscapedRequest(server + "/exec?action=Main.getExamples", {'mode': t, 'locale': 'en'});

			xhr.addEventListener("readystatechange", function(currentTab, tab) {return function() {
				if (
						this.readyState === 4
				) {
					try {
						var json = JSON.parse(this.responseText);
					} catch (e) {
						console.log(e);
					}

					if(json != null) {
						var list = document.createElement("ul");
						list.classList.add("listfilter-panel__list");
						for (i in json) {
							var listItem = document.createElement("li");
							listItem.classList.add("listfilter-panel__item");
							var label = document.createElement("label");
							label.classList.add("listfilter");
							var listItemID = "input_" + tab + '_' + i;
							label.setAttribute("for", listItemID);
							label.setAttribute("data-value", json[i].text);

							var input = document.createElement("input");
							input.classList.add("listfilter__input");
							input.id = listItemID;
							input.type = "radio";
							// input.name = "text_" + i;
							input.name = "radioMode_" + tab;
							input.value = "text_" + i;
							if (i == 0) {
								input.setAttribute("checked", "checked");
							}
							label.appendChild(input);
							label.addEventListener('click', activate, !1);

							var span = document.createElement("span");
							span.classList.add("listfilter__caption");
							span.classList.add("caption");
							label.appendChild(span);

							span.innerText = json[i].caption;
							var checkdiv = document.createElement("div");
							checkdiv.classList.add("listfilter_check");
							label.appendChild(checkdiv);

							listItem.appendChild(label);
							list.appendChild(listItem);
						}
						var listFilterCurrent = document.createElement("div");
						listFilterCurrent.classList.add("listfilter-panel__current");
						listFilterCurrent.addEventListener('click', addClassActive, false);

						var captionDiv = document.createElement("div");
						captionDiv.classList.add("caption");
						if (json.length > 0) {
							captionDiv.innerText = json[0].caption;
						}
						listFilterCurrent.appendChild(captionDiv);

						var linkOffDiv = document.createElement("div");
						linkOffDiv.classList.add("link-off");
						listFilterCurrent.appendChild(linkOffDiv);

						var img = document.createElement("img");
						img.alt = "off";
						img.src = "{{ 'assets/images/arrow-white.svg'|theme }}";
						linkOffDiv.appendChild(img);

						var listFilter = document.createElement("div");
						listFilter.classList.add("listfilter-panel");
						listFilter.appendChild(listFilterCurrent);

						var listScroller = document.createElement("div");
						listScroller.classList.add("listfilter-scroller");
						listScroller.appendChild(list);
						listFilter.appendChild(listScroller);

						var textarea = document.createElement("textarea");
						textarea.classList.add('editor-panel', 'active');
						textarea.id = 'textarea_' + t;

						var plaginBox = currentTab.querySelector(".plagin-panel__plagin-box");
						var button = plaginBox.firstChild;
						plaginBox.insertBefore(listFilter, button);
						plaginBox.insertBefore(textarea, button);

						if (json.length > 0) {
							textarea.innerHTML = json[0].text;
							// textarea.innerText = json[0].text;
							var editor = textarea.nextSibling;
							if (editor) {
								editor.remove();
							}

							codeMirrorFromTextarea(currentTab, textarea);
						}
					}
				}
			}}(currentTab, t))
		}
	}

	function codeMirrorFromTextarea(parent, textArea) {
		CodeMirror.fromTextArea(textArea, {
			mode: "fusion",
			theme: 'darcula',
			selectionPointer: true
		});

		parent.querySelector('.CodeMirror').addEventListener("mouseover", function(event) {
			parent.querySelector('.CodeMirror-hscrollbar').classList.add('CodeMirror-hscrollbar-auto');
			parent.querySelector('.CodeMirror-vscrollbar').classList.add('CodeMirror-vscrollbar-auto');
		});
		parent.querySelector('.CodeMirror').addEventListener("mouseout", function(event) {
			parent.querySelector('.CodeMirror-hscrollbar').classList.remove('CodeMirror-hscrollbar-auto');
			parent.querySelector('.CodeMirror-vscrollbar').classList.remove('CodeMirror-vscrollbar-auto');
		});
	}

	function addClassActive() {
		var menu = Helpers.parents(this, '.listfilter-panel')[0];
		if (menu.classList.contains('list-active')) {
			menu.classList.remove('list-active')
		} else {
			menu.classList.add('list-active')
		}
	}

	function activate(e) {
		var box = Helpers.parents(this, '.plagin-panel'),
				id = this.attributes.for.value,
				panels = box[0].querySelectorAll('.editor-panel'),
				val = e.currentTarget.dataset.value,
				name = this.querySelectorAll('.caption')[0].innerText;

		if (box[0].querySelectorAll('.CodeMirror')[0]) {
			var editor = panels[0].nextSibling;
			editor.remove();
		}
		panels[0].innerHTML = this.dataset.value;
		codeMirrorFromTextarea(box[0], panels[0]);

		for (var p = 0; p < panels.length; p++) {
			panels[p].classList.remove('active');
			if (panels[p].id == id) {
				panels[p].classList.add('active');
			}
		}
		Helpers.parents(this, '.listfilter-panel')[0].querySelectorAll('.listfilter-panel__current .caption')[0].innerText = name;
		Helpers.parents(this, '.listfilter-panel')[0].classList.remove('list-active');
	}
</script>